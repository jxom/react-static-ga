{"version":3,"sources":["../../src/commands/create.js"],"names":["inquirer","registerPrompt","autoCompletePrompt","typeLocal","typeGit","typeExample","templatesDir","path","resolve","__dirname","templates","fs","readdirSync","filter","d","startsWith","name","template","isCLI","isYarn","shouldUseYarn","console","log","exampleChoices","templateType","prompt","type","message","default","answers","Error","dest","process","cwd","existsSync","source","answersSoFar","input","chalk","green","localDirectory","githubRepoName","red","getGitHubRepo","downloadGitRepo","copy","pathExistsSync","join","move","removeSync","hex","ChalkColor","yarn","npm","create","stdio","e"],"mappings":"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","sourcesContent":["import fs from 'fs-extra'\nimport chalk from 'chalk'\nimport path from 'path'\nimport git from 'git-promise'\nimport { execSync } from 'child_process'\nimport inquirer from 'inquirer'\nimport autoCompletePrompt from 'inquirer-autocomplete-prompt'\nimport matchSorter from 'match-sorter'\nimport downloadGitRepo from 'download-git-repo'\nimport { promisify } from 'util'\n//\nimport { ChalkColor, time, timeEnd } from '../utils'\n\ninquirer.registerPrompt('autocomplete', autoCompletePrompt)\n\nconst typeLocal = 'Local Directory...'\nconst typeGit = 'GIT Repository...'\nconst typeExample = 'React Static Example'\n\nconst templatesDir = path.resolve(__dirname, '../../templates')\n\nconst templates = fs.readdirSync(templatesDir).filter(d => !d.startsWith('.'))\n\nexport default (async function create({ name, template, isCLI }) {\n  const isYarn = shouldUseYarn()\n\n  console.log('')\n\n  const exampleChoices = [...templates, typeLocal, typeGit]\n\n  let templateType = typeExample\n\n  // prompt if --name argument is not passed from CLI\n  // warning: since name will be set as a function by commander by default\n  //   unless it's assigned as an argument from the CLI, we can't simply just\n  //   check for its existence. if it has not been set by the CLI, we properly\n  //   set it to null for later conditional checks.\n  if (isCLI && !name) {\n    const answers = await inquirer.prompt({\n      type: 'input',\n      name: 'name',\n      message: 'What should we name this project?',\n      default: 'my-static-site',\n    })\n    name = answers.name\n  }\n\n  if (!name) {\n    throw new Error(\n      'A project name is required. Please use options.name to define one.'\n    )\n  }\n\n  const dest = path.resolve(process.cwd(), name)\n\n  if (fs.existsSync(dest)) {\n    throw new Error(\n      `Could not create project. Directory already exists at ${dest}!`\n    )\n  }\n\n  if (isCLI && !template) {\n    const answers = await inquirer.prompt({\n      type: 'autocomplete',\n      name: 'template',\n      message: 'Select a template below...',\n      source: async (answersSoFar, input) =>\n        !input ? exampleChoices : matchSorter(exampleChoices, input),\n    })\n    template = answers.template\n  }\n\n  if (!template) {\n    throw new Error(\n      'A project template is required. Please use options.template to define one.'\n    )\n  }\n\n  time(chalk.green(`=> [\\u2713] Project \"${name}\" created`))\n  console.log('=> Creating new react-static project...')\n\n  if (template === typeLocal) {\n    templateType = typeLocal\n    const { localDirectory } = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'localDirectory',\n        message: `Enter an local directory's absolute location (~/Desktop/my-template)`,\n      },\n    ])\n    template = localDirectory\n  }\n\n  if (template === typeGit) {\n    templateType = typeGit\n    const { githubRepoName } = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'githubRepoName',\n        message:\n          'Enter a repository URL from GitHub, BitBucket, GitLab, or any other public repo. (https://github.com/ownerName/repoName.git)',\n      },\n    ])\n    template = githubRepoName\n  }\n\n  console.log('')\n\n  // GIT repositories\n  if (templateType === typeGit) {\n    if (template.startsWith('https://') || template.startsWith('git@')) {\n      try {\n        console.log(chalk.green(`Cloning Git template: ${template}`))\n        await git(`clone --recursive ${template} ${dest}`)\n      } catch (err) {\n        console.log(chalk.red(`Cloning Git template: ${template} failed!`))\n        throw err\n      }\n    } else if (template.startsWith('http://')) {\n      // use download-git-repo to fetch remote repository\n      const getGitHubRepo = promisify(downloadGitRepo)\n      try {\n        console.log(chalk.green(`Cloning Git template: ${template}`))\n        await getGitHubRepo(template, dest)\n      } catch (err) {\n        console.log(chalk.red(`Cloning Git template: ${template} failed!`))\n        throw err\n      }\n    }\n  } else if (templateType === typeExample) {\n    // React Static templates\n    console.log(chalk.green(`Using React Static template: ${template}`))\n    try {\n      await fs.copy(\n        path.resolve(templatesDir, template),\n        path.resolve(process.cwd(), dest)\n      )\n    } catch (err) {\n      console.log(\n        chalk.red(`Copying React Static template: ${template} failed!`)\n      )\n      throw err\n    }\n  } else {\n    // Local templates\n    try {\n      console.log(chalk.green(`Using template from directory: ${template}`))\n      await fs.copy(path.resolve(process.cwd(), template), dest)\n    } catch (err) {\n      console.log(\n        chalk.red(`Copying the template from directory: ${template} failed!`)\n      )\n      throw err\n    }\n  }\n\n  // Since npm packaging will clobber .gitignore files\n  // We need to rename the gitignore file to .gitignore\n  // See: https://github.com/npm/npm/issues/1862\n\n  if (\n    !fs.pathExistsSync(path.join(dest, '.gitignore')) &&\n    fs.pathExistsSync(path.join(dest, 'gitignore'))\n  ) {\n    await fs.move(path.join(dest, 'gitignore'), path.join(dest, '.gitignore'))\n  }\n  if (fs.pathExistsSync(path.join(dest, 'gitignore'))) {\n    fs.removeSync(path.join(dest, 'gitignore'))\n  }\n\n  if (isCLI) {\n    console.log(\n      `=> Installing dependencies with: ${\n        isYarn\n          ? chalk.hex(ChalkColor.yarn)('Yarn')\n          : chalk.hex(ChalkColor.npm)('NPM')\n      }...`\n    )\n    // We install react-static separately to ensure we always have the latest stable release\n    execSync(`cd ${name} && ${isYarn ? 'yarn' : 'npm install'}`)\n    console.log('')\n  }\n\n  timeEnd(chalk.green(`=> [\\u2713] Project \"${name}\" created`))\n\n  console.log(`\n  ${chalk.green('=> To get started:')}\n\n    cd ${name} ${\n    !isCLI\n      ? `&& ${\n          isYarn\n            ? chalk.hex(ChalkColor.yarn)('yarn')\n            : chalk.hex(ChalkColor.npm)('npm install')\n        }`\n      : ''\n  }\n\n    ${\n      isYarn\n        ? chalk.hex(ChalkColor.yarn)('yarn')\n        : chalk.hex(ChalkColor.npm)('npm run')\n    } start ${chalk.green('- Start the development server')}\n    ${\n      isYarn\n        ? chalk.hex(ChalkColor.yarn)('yarn')\n        : chalk.hex(ChalkColor.npm)('npm run')\n    } build ${chalk.green('- Build for production')}\n    ${\n      isYarn\n        ? chalk.hex(ChalkColor.yarn)('yarn')\n        : chalk.hex(ChalkColor.npm)('npm run')\n    } serve ${chalk.green('- Test a production build locally')}\n  `)\n})\n\nfunction shouldUseYarn() {\n  try {\n    execSync('yarnpkg --version', { stdio: 'ignore' })\n    return true\n  } catch (e) {\n    return false\n  }\n}\n"],"file":"create.js"}