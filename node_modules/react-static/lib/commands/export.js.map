{"version":3,"sources":["../../src/commands/export.js"],"names":["originalConfig","config","staging","debug","isBuild","incremental","process","env","NODE_ENV","REACT_STATIC_ENV","BABEL_ENV","REACT_STATIC_STAGING","REACT_STATIC_DEBUG","REACT_STATIC_INCREMENTAL","fs","readJson","paths","TEMP","bundledEnv","Object","keys","forEach","key","opts","dev","routes","console","log","clientStats","Error","PrettyError","require","render","exit","onBuild"],"mappings":";;;;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;4BAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4EAMX,EANW,EACLA,cADK,SACbC,MADa,EAEbC,OAFa,SAEbA,OAFa,EAGbC,KAHa,SAGbA,KAHa,EAIbC,OAJa,SAIbA,OAJa,EAKbC,WALa,SAKbA,WALa;;AAOb;AACA,gBAAI,OAAOC,OAAO,CAACC,GAAR,CAAYC,QAAnB,KAAgC,WAAhC,IAA+C,CAACL,KAApD,EAA2D;AACzDG,cAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAuB,YAAvB;AACD;;AAEDF,YAAAA,OAAO,CAACC,GAAR,CAAYE,gBAAZ,GAA+B,YAA/B;AACAH,YAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ,GAAwB,YAAxB;;AAEA,gBAAIR,OAAJ,EAAa;AACXI,cAAAA,OAAO,CAACC,GAAR,CAAYI,oBAAZ,GAAmC,MAAnC;AACD;;AAED,gBAAIR,KAAJ,EAAW;AACTG,cAAAA,OAAO,CAACC,GAAR,CAAYK,kBAAZ,GAAiC,MAAjC;AACD;;AAED,gBAAIP,WAAJ,EAAiB;AACfC,cAAAA,OAAO,CAACC,GAAR,CAAYM,wBAAZ,GAAuC,MAAvC;AACD;;AAzBY,gBA8BRT,OA9BQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA+BI,uBAAUJ,cAAV,CA/BJ;;AAAA;AA+BXC,YAAAA,MA/BW;AAgCXA,YAAAA,MAAM,CAACD,cAAP,GAAwBA,cAAxB,CAhCW,CAiCX;;AAjCW;AAAA,mBAkCcc,iBAAGC,QAAH,WACpBd,MAAM,CAACe,KAAP,CAAaC,IADO,8BAlCd;;AAAA;AAkCLC,YAAAA,UAlCK;AAqCXC,YAAAA,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,OAAxB,CAAgC,UAAAC,GAAG,EAAI;AACrC,kBAAI,OAAOhB,OAAO,CAACC,GAAR,CAAYe,GAAZ,CAAP,KAA4B,WAAhC,EAA6C;AAC3ChB,gBAAAA,OAAO,CAACC,GAAR,CAAYe,GAAZ,IAAmBJ,UAAU,CAACI,GAAD,CAA7B;AACD;AACF,aAJD;AArCW;AAAA,mBA0CI,2BAAc;AAAErB,cAAAA,MAAM,EAANA,MAAF;AAAUsB,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,GAAG,EAAE,KAAP;AAAcnB,gBAAAA,WAAW,EAAXA;AAAd;AAAhB,aAAd,CA1CJ;;AAAA;AA0CXJ,YAAAA,MA1CW;AAAA;AAAA;;AAAA;AA4CXA,YAAAA,MAAM,GAAGD,cAAT;;AA5CW;AAAA,gBA+CRC,MAAM,CAACwB,MA/CC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgDL,2BAAcxB,MAAd,EAAsB;AAAEuB,cAAAA,GAAG,EAAE;AAAP,aAAtB,CAhDK;;AAAA;AAmDb,gBAAIrB,KAAJ,EAAW;AACTuB,cAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAD,cAAAA,OAAO,CAACC,GAAR,CAAY1B,MAAZ;AACD;;AAtDY;AAAA,mBAwDaa,iBAAGC,QAAH,WACrBd,MAAM,CAACe,KAAP,CAAaC,IADQ,wBAxDb;;AAAA;AAwDPW,YAAAA,WAxDO;;AAAA,gBA4DRA,WA5DQ;AAAA;AAAA;AAAA;;AAAA,kBA6DL,IAAIC,KAAJ,CAAU,uBAAV,CA7DK;;AAAA;AAAA;AAAA;AAAA,mBAiEL,0BAAa;AACjB5B,cAAAA,MAAM,EAANA,MADiB;AAEjB2B,cAAAA,WAAW,EAAXA;AAFiB,aAAb,CAjEK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsELE,YAAAA,WAtEK,GAsESC,OAAO,CAAC,cAAD,CAtEhB;AAuEXL,YAAAA,OAAO,CAACC,GAAR,CAAY,IAAIG,WAAJ,GAAkBE,MAAlB,aAAZ;AACA1B,YAAAA,OAAO,CAAC2B,IAAR,CAAa,CAAb;;AAxEW;AAAA;AAAA,mBA2EP,sBAAS;AAAEhC,cAAAA,MAAM,EAANA;AAAF,aAAT,CA3EO;;AAAA;AAAA,iBA6ETA,MAAM,CAACiC,OA7EE;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA8ELjC,MAAM,CAACiC,OAAP,CAAe;AAAEjC,cAAAA,MAAM,EAANA;AAAF,aAAf,CA9EK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import fs from 'fs-extra'\n//\nimport { exportRoutes, buildXML, prepareRoutes, getConfig } from '../static'\n\nexport default async ({\n  config: originalConfig,\n  staging,\n  debug,\n  isBuild,\n  incremental,\n} = {}) => {\n  // ensure ENV variables are set\n  if (typeof process.env.NODE_ENV === 'undefined' && !debug) {\n    process.env.NODE_ENV = 'production'\n  }\n\n  process.env.REACT_STATIC_ENV = 'production'\n  process.env.BABEL_ENV = 'production'\n\n  if (staging) {\n    process.env.REACT_STATIC_STAGING = 'true'\n  }\n\n  if (debug) {\n    process.env.REACT_STATIC_DEBUG = 'true'\n  }\n\n  if (incremental) {\n    process.env.REACT_STATIC_INCREMENTAL = 'true'\n  }\n\n  let config\n\n  // Allow config location to be overriden\n  if (!isBuild) {\n    config = await getConfig(originalConfig)\n    config.originalConfig = originalConfig\n    // Restore the process environment variables that were present during the build\n    const bundledEnv = await fs.readJson(\n      `${config.paths.TEMP}/bundle-environment.json`\n    )\n    Object.keys(bundledEnv).forEach(key => {\n      if (typeof process.env[key] === 'undefined') {\n        process.env[key] = bundledEnv[key]\n      }\n    })\n    config = await prepareRoutes({ config, opts: { dev: false, incremental } })\n  } else {\n    config = originalConfig\n  }\n\n  if (!config.routes) {\n    await prepareRoutes(config, { dev: false })\n  }\n\n  if (debug) {\n    console.log('DEBUG - Resolved static.config.js:')\n    console.log(config)\n  }\n\n  const clientStats = await fs.readJson(\n    `${config.paths.TEMP}/client-stats.json`\n  )\n\n  if (!clientStats) {\n    throw new Error('No Client Stats Found')\n  }\n\n  try {\n    await exportRoutes({\n      config,\n      clientStats,\n    })\n  } catch (e) {\n    const PrettyError = require('pretty-error')\n    console.log(new PrettyError().render(e))\n    process.exit(1)\n  }\n\n  await buildXML({ config })\n\n  if (config.onBuild) {\n    await config.onBuild({ config })\n  }\n}\n"],"file":"export.js"}