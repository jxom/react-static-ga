{"version":3,"sources":["../../src/static/fetchRoutes.js"],"names":["config","sharedDataByHash","Map","console","log","dataProgress","routes","length","chalk","green","downloadTasks","i","route","push","getData","dev","data","sharedHashesByProp","sharedData","Object","keys","forEach","name","sharedPiece","set","hash","tick","Number","outputFileRate","fetchRoutes"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;4BAEgB,kBAA2BA,MAA3B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACd;AACMC,YAAAA,gBAFQ,GAEW,IAAIC,GAAJ,EAFX;AAIdC,YAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACMC,YAAAA,YALQ,GAKO,qBAASL,MAAM,CAACM,MAAP,CAAcC,MAAvB,CALP;AAMd,6BAAKC,eAAMC,KAAN,CAAY,mCAAZ,CAAL,EANc,CAQd;;AACMC,YAAAA,aATQ,GASQ,EATR;;AAAA,mCAULC,CAVK;AAWZ,kBAAMC,KAAK,GAAGZ,MAAM,CAACM,MAAP,CAAcK,CAAd,CAAd;AACA;;AACAD,cAAAA,aAAa,CAACG,IAAd;AAAA;AAAA;AAAA;AAAA,wCAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,sCAGf,CAAC,CAACD,KAAK,CAACE,OAHO;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAGWF,KAAK,CAACE,OAAN,CAAc;AAAEF,0BAAAA,KAAK,EAALA,KAAF;AAASG,0BAAAA,GAAG,EAAE;AAAd,yBAAd,CAHX;;AAAA;AAAA;;AAAA;AAEjBH,wBAAAA,KAAK,CAACI,IAFW;;AAIjB;AACA,4BAAI,CAACJ,KAAK,CAACI,IAAX,EAAiB;AACfJ,0BAAAA,KAAK,CAACI,IAAN,GAAa,EAAb;AACD,yBAPgB,CAQjB;;;AACAJ,wBAAAA,KAAK,CAACK,kBAAN,GAA2B,EAA3B;;AACA,4BAAIL,KAAK,CAACM,UAAV,EAAsB;AACpBC,0BAAAA,MAAM,CAACC,IAAP,CAAYR,KAAK,CAACM,UAAlB,EAA8BG,OAA9B,CAAsC,UAAAC,IAAI,EAAI;AAC5C,gCAAMC,WAAW,GAAGX,KAAK,CAACM,UAAN,CAAiBI,IAAjB,CAApB;AACArB,4BAAAA,gBAAgB,CAACuB,GAAjB,CAAqBD,WAAW,CAACE,IAAjC,EAAuCF,WAAvC;AACAX,4BAAAA,KAAK,CAACK,kBAAN,CAAyBK,IAAzB,IAAiCC,WAAW,CAACE,IAA7C;AACAb,4BAAAA,KAAK,CAACM,UAAN,CAAiBI,IAAjB,IAAyBC,WAAW,CAACP,IAArC;AACD,2BALD;AAMD;;AACDX,wBAAAA,YAAY,CAACqB,IAAb;;AAlBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAnB;AAbY;;AAUd,iBAASf,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGX,MAAM,CAACM,MAAP,CAAcC,MAAlC,EAA0CI,CAAC,EAA3C,EAA+C;AAAA,oBAAtCA,CAAsC;AAuB9C;;AAjCa;AAAA,mBAkCR,oBAAQD,aAAR,EAAuBiB,MAAM,CAAC3B,MAAM,CAAC4B,cAAR,CAA7B,CAlCQ;;AAAA;AAmCd,gCAAQpB,eAAMC,KAAN,CAAY,mCAAZ,CAAR;AAnCc,8CAqCP,oCAAsBT,MAAtB,EAA8BC,gBAA9B,CArCO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAe4B,W;;;;SAAAA,W","sourcesContent":["import chalk from 'chalk'\nimport exportSharedRouteData from './exportSharedRouteData'\nimport { progress, time, timeEnd, poolAll } from '../utils'\n\nexport default (async function fetchRoutes(config) {\n  // Set up some scaffolding for automatic data splitting\n  const sharedDataByHash = new Map()\n\n  console.log('=> Fetching Route Data...')\n  const dataProgress = progress(config.routes.length)\n  time(chalk.green('=> [\\u2713] Route Data Downloaded'))\n\n  // Use a traditional for loop here for perf\n  const downloadTasks = []\n  for (let i = 0; i < config.routes.length; i++) {\n    const route = config.routes[i]\n    /* eslint-disable no-loop-func */\n    downloadTasks.push(async () => {\n      // Fetch data from each route\n      route.data =\n        !!route.getData && (await route.getData({ route, dev: false }))\n      // Default data (must be an object)\n      if (!route.data) {\n        route.data = {}\n      }\n      // Extract any shared data\n      route.sharedHashesByProp = {}\n      if (route.sharedData) {\n        Object.keys(route.sharedData).forEach(name => {\n          const sharedPiece = route.sharedData[name]\n          sharedDataByHash.set(sharedPiece.hash, sharedPiece)\n          route.sharedHashesByProp[name] = sharedPiece.hash\n          route.sharedData[name] = sharedPiece.data\n        })\n      }\n      dataProgress.tick()\n    })\n  }\n  await poolAll(downloadTasks, Number(config.outputFileRate))\n  timeEnd(chalk.green('=> [\\u2713] Route Data Downloaded'))\n\n  return exportSharedRouteData(config, sharedDataByHash)\n})\n"],"file":"fetchRoutes.js"}