{"version":3,"sources":["../../../../src/static/webpack/rules/jsLoader.js"],"names":["readBabelConfig","root","babelFiles","extendsFile","forEach","file","fs","statSync","extends","err","config","stage","babelFile","isRelativePath","paths","DIST","startsWith","ROOT","test","include","SRC","use","loader","options","presets","babelPreset","modules","cacheDirectory","TEMP","compact","highlightCode"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;AAEA;AACA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,IAAI,EAAI;AAC9B,MAAMC,UAAU,GAAG,WACdD,IADc,0BAEdA,IAFc,6BAGdA,IAHc,sBAAnB;AAMA,MAAIE,WAAW,GAAG,EAAlB;AAEAD,EAAAA,UAAU,CAACE,OAAX,CAAmB,UAAAC,IAAI,EAAI;AACzB,QAAI;AACFC,kBAAGC,QAAH,CAAYF,IAAZ;;AACAF,MAAAA,WAAW,GAAG;AAAEK,QAAAA,OAAO,EAAEH;AAAX,OAAd;AACD,KAHD,CAGE,OAAOI,GAAP,EAAY,CACZ;AACD;AACF,GAPD;AASA,SAAON,WAAP;AACD,CAnBD;;eAqBe,wBAA4B;AAAA,MAAjBO,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,KAAS,QAATA,KAAS;AACzC,MAAIC,SAAS,GAAG,EAAhB;AAEA,MAAMC,cAAc,GAAGH,MAAM,CAACI,KAAP,CAAaC,IAAb,CAAkBC,UAAlB,CAA6BN,MAAM,CAACI,KAAP,CAAaG,IAA1C,CAAvB;;AAEA,MAAI,CAACJ,cAAL,EAAqB;AACnBD,IAAAA,SAAS,GAAGZ,eAAe,CAACU,MAAM,CAACI,KAAP,CAAaG,IAAd,CAA3B;AACD;;AAED,SAAO;AACLC,IAAAA,IAAI,EAAE,iBADD;AAELC,IAAAA,OAAO,EAAE,CACPT,MAAM,CAACI,KAAP,CAAaM,GADN,EAEP,4BAFO,EAGP,kCAHO,CAFJ;AAOLC,IAAAA,GAAG,EAAE,CACH;AACA;AACEC,MAAAA,MAAM,EAAE,cADV;AAEEC,MAAAA,OAAO,oBACFX,SADE;AAELX,QAAAA,IAAI,EAAES,MAAM,CAACI,KAAP,CAAaG,IAFd;AAGLO,QAAAA,OAAO,EAAE,CAAC,CAACC,oBAAD,EAAc;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAd,CAAD,CAHJ;AAILC,QAAAA,cAAc,EAAEd,cAAc,GAAGF,KAAK,KAAK,MAAb,GAAsBD,MAAM,CAACI,KAAP,CAAac,IAJ5D;AAKLC,QAAAA,OAAO,EAAElB,KAAK,KAAK,MALd;AAMLmB,QAAAA,aAAa,EAAE;AANV;AAFT,KAFG;AAPA,GAAP;AAsBD,C;;;;;;;;;;;;;;;0BApDK9B,e","sourcesContent":["import fs from 'fs'\nimport babelPreset from '../../../../babel-preset'\n\n// we check which babel config file exists in the project root\nconst readBabelConfig = root => {\n  const babelFiles = [\n    `${root}/.babelrc`,\n    `${root}/.babelrc.js`,\n    `${root}/babel.config.js`,\n  ]\n\n  let extendsFile = {}\n\n  babelFiles.forEach(file => {\n    try {\n      fs.statSync(file)\n      extendsFile = { extends: file }\n    } catch (err) {\n      // dont do anything\n    }\n  })\n\n  return extendsFile\n}\n\nexport default function({ config, stage }) {\n  let babelFile = {}\n\n  const isRelativePath = config.paths.DIST.startsWith(config.paths.ROOT)\n\n  if (!isRelativePath) {\n    babelFile = readBabelConfig(config.paths.ROOT)\n  }\n\n  return {\n    test: /\\.(js|jsx|mjs)$/,\n    include: [\n      config.paths.SRC,\n      /react-static-templates\\.js/,\n      /react-static-browser-plugins\\.js/,\n    ],\n    use: [\n      // 'thread-loader',\n      {\n        loader: 'babel-loader',\n        options: {\n          ...babelFile,\n          root: config.paths.ROOT,\n          presets: [[babelPreset, { modules: false }]],\n          cacheDirectory: isRelativePath ? stage !== 'prod' : config.paths.TEMP,\n          compact: stage === 'prod',\n          highlightCode: true,\n        },\n      },\n    ],\n  }\n}\n"],"file":"jsLoader.js"}