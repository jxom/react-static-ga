{"version":3,"sources":["../../../src/static/webpack/index.js"],"names":["resolvedReloadRoutes","reloadWebpackRoutes","devServer","reloadRoutes","webpackConfig","config","stage","require","default","isNode","Error","defaultLoaders","webpackHook","plugins","startDevServer","webpack","devCompiler","intendedPort","port","process","env","PORT","Number","messagePort","chalk","red","green","host","HOST","devServerConfig","hot","disableHostCheck","contentBase","paths","PUBLIC","DIST","publicPath","historyApiFallback","compress","quiet","watchOptions","ignored","before","app","get","req","res","json","next","getSiteData","dev","siteData","status","routes","forEach","routePath","path","encodeURI","route","find","d","getData","data","sharedData","Object","keys","key","sharedHashesByProp","first","console","log","hooks","invalid","tap","name","file","replace","ROOT","done","stats","messages","toJson","isSuccessful","errors","length","warnings","onStart","message","yellow","WebpackDevServer","socket","opts","silent","map","getRoutePath","emit","type","Promise","resolve","reject","listen","err","buildProductionBundles","allWebpackConfigs","run","stack","details","prodStats","nodeStats","checkBuildStats","stageStats","buildErrors","hasErrors","buildWarnings","hasWarnings","toString","context","performance","hash","timings","entrypoints","chunkOrigins","chunkModules","colors","bold","prodStatsJson","fs","outputFileSync","join","TEMP","JSON","stringify"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-dynamic-require, react/no-danger, import/no-mutable-exports */\nimport webpack from 'webpack'\nimport path from 'path'\nimport formatWebpackMessages from 'react-dev-utils/formatWebpackMessages'\nimport chalk from 'chalk'\nimport WebpackDevServer from 'webpack-dev-server'\nimport io from 'socket.io'\nimport fs from 'fs-extra'\n// import errorOverlayMiddleware from 'react-dev-utils/errorOverlayMiddleware'\n//\nimport { getStagedRules } from './rules'\nimport { prepareRoutes } from '../'\nimport {\n  getRoutePath,\n  makeHookReducer,\n  findAvailablePort,\n  time,\n  timeEnd,\n} from '../../utils'\n\nlet resolvedReloadRoutes\nlet reloadWebpackRoutes\n\nlet devServer\n\nconst reloadRoutes = (...args) => {\n  if (!resolvedReloadRoutes) {\n    // Not ready yet, so just wait\n    return\n  }\n  resolvedReloadRoutes(...args)\n}\n\nexport { reloadRoutes }\n\n// Builds a compiler using a stage preset, then allows extension via\n// webpackConfigurator\nexport async function webpackConfig({ config, stage }) {\n  let webpackConfig\n  if (stage === 'dev') {\n    webpackConfig = require('./webpack.config.dev').default({ config })\n  } else if (stage === 'prod') {\n    webpackConfig = require('./webpack.config.prod').default({\n      config,\n    })\n  } else if (stage === 'node') {\n    webpackConfig = require('./webpack.config.prod').default({\n      config,\n      isNode: true,\n    })\n  } else {\n    throw new Error('A stage is required when building a compiler.')\n  }\n\n  const defaultLoaders = getStagedRules({ config, stage })\n\n  const webpackHook = makeHookReducer(config.plugins, 'webpack')\n\n  webpackConfig = await webpackHook(webpackConfig, {\n    config,\n    stage,\n    defaultLoaders,\n  })\n\n  return webpackConfig\n}\n\n// Starts the development server\nexport async function startDevServer({ config }) {\n  if (devServer) {\n    return devServer\n  }\n\n  const devCompiler = webpack(await webpackConfig({ config, stage: 'dev' }))\n\n  // Default to localhost:3000, or use a custom combo if defined in static.config.js\n  // or environment variables\n  const intendedPort =\n    (config.devServer && config.devServer.port) || process.env.PORT || 3000\n  const port = await findAvailablePort(Number(intendedPort))\n  // Find an available port for messages, as long as it's not the devServer port\n  const messagePort = await findAvailablePort(4000, [port])\n  if (intendedPort !== port) {\n    time(\n      chalk.red(\n        `=> Warning! Port ${intendedPort} is not available. Using port ${chalk.green(\n          intendedPort\n        )} instead!`\n      )\n    )\n  }\n  const host =\n    (config.devServer && config.devServer.host) ||\n    process.env.HOST ||\n    'http://localhost'\n\n  const devServerConfig = {\n    hot: true,\n    disableHostCheck: true,\n    contentBase: [config.paths.PUBLIC, config.paths.DIST],\n    publicPath: '/',\n    historyApiFallback: true,\n    compress: false,\n    quiet: true,\n    ...config.devServer,\n    watchOptions: {\n      ignored: 'node_modules',\n      // ignored: new RegExp(`(node_modules|${config.paths.PAGES})`),\n      ...(config.devServer ? config.devServer.watchOptions || {} : {}),\n    },\n    before: app => {\n      // Serve the site data\n      app.get('/__react-static__/getMessagePort', async (req, res) => {\n        res.json({\n          port: messagePort,\n        })\n      })\n\n      app.get('/__react-static__/siteData', async (req, res, next) => {\n        try {\n          const siteData = await config.getSiteData({ dev: true })\n          res.json(siteData)\n        } catch (err) {\n          res.status(500)\n          res.json(err)\n          next(err)\n        }\n      })\n\n      // Since routes may change during dev, this function can rebuild all of the config\n      // routes. It also references the original config when possible, to make sure it\n      // uses any up to date getData callback generated from new or replacement routes.\n      reloadWebpackRoutes = config => {\n        // Serve each routes data\n        config.routes.forEach(({ path: routePath }) => {\n          app.get(\n            `/__react-static__/routeInfo/${encodeURI(\n              routePath === '/' ? '' : routePath\n            )}`,\n            async (req, res, next) => {\n              // Make sure we have the most up to date route from the config, not\n              // an out of dat object.\n              const route = config.routes.find(d => d.path === routePath)\n              try {\n                if (!route) {\n                  throw new Error('Route could not be found!')\n                }\n                // Fetch the data\n                const data = route.getData\n                  ? await route.getData({ route, dev: true })\n                  : {}\n\n                // Auto-include any shared data\n                const sharedData = {}\n                if (route.sharedData) {\n                  Object.keys(route.sharedData).forEach(key => {\n                    sharedData[key] = route.sharedData[key].data\n                  })\n                }\n\n                // Don't use any hashProp, just pass all the data in dev\n                res.json({\n                  ...route,\n                  sharedHashesByProp: {},\n                  data: {\n                    ...data,\n                    ...sharedData,\n                  },\n                })\n              } catch (err) {\n                res.status(500)\n                next(err)\n              }\n            }\n          )\n        })\n      }\n\n      reloadWebpackRoutes(config)\n\n      if (config.devServer && config.devServer.before) {\n        config.devServer.before(app)\n      }\n    },\n    port,\n    host,\n  }\n\n  let first = true\n  console.log('=> Building App Bundle...')\n  time(chalk.green('=> [\\u2713] Build Complete'))\n\n  devCompiler.hooks.invalid.tap(\n    {\n      name: 'React-Static',\n    },\n    file => {\n      console.log('=> File changed:', file.replace(config.paths.ROOT, ''))\n      console.log('=> Updating build...')\n      time(chalk.green('=> [\\u2713] Build Updated'))\n    }\n  )\n\n  devCompiler.hooks.done.tap(\n    {\n      name: 'React-Static',\n    },\n    stats => {\n      const messages = formatWebpackMessages(stats.toJson({}, true))\n      const isSuccessful = !messages.errors.length && !messages.warnings.length\n\n      if (isSuccessful) {\n        if (first) {\n          timeEnd(chalk.green('=> [\\u2713] Build Complete'))\n          console.log(\n            chalk.green('=> [\\u2713] App serving at'),\n            `${host}:${port}`\n          )\n        } else {\n          timeEnd(chalk.green('=> [\\u2713] Build Updated'))\n        }\n        if (first && config.onStart) {\n          config.onStart({ devServerConfig })\n        }\n      }\n\n      first = false\n\n      if (messages.errors.length) {\n        console.log(chalk.red('Failed to build! Fix any errors and try again!'))\n        messages.errors.forEach(message => {\n          console.log(message)\n          console.log()\n        })\n      }\n\n      if (messages.warnings.length) {\n        console.log(chalk.yellow('Build complete with warnings.'))\n        console.log()\n        messages.warnings.forEach(message => {\n          console.log(message)\n          console.log()\n        })\n      }\n    }\n  )\n\n  // Start the webpack dev server\n  devServer = new WebpackDevServer(devCompiler, devServerConfig)\n\n  // Start the messages socket\n  const socket = io()\n\n  resolvedReloadRoutes = async paths => {\n    await prepareRoutes(\n      { config, opts: { dev: true }, silent: true },\n      async config => {\n        if (!paths) {\n          paths = config.routes.map(route => route.path)\n        }\n        paths = paths.map(getRoutePath)\n        reloadWebpackRoutes(config)\n        socket.emit('message', { type: 'reloadRoutes', paths })\n      }\n    )\n  }\n\n  await new Promise((resolve, reject) => {\n    devServer.listen(port, null, err => {\n      if (err) {\n        return reject(err)\n      }\n      resolve()\n    })\n  })\n\n  // Make sure we start listening on the message port after the dev server.\n  // We do this mostly to appease codesandbox.io, since they autobind to the first\n  // port that opens up for their preview window.\n  socket.listen(messagePort)\n\n  return devServer\n}\n\nexport async function buildProductionBundles({ config }) {\n  const allWebpackConfigs = [\n    await webpackConfig({ config, stage: 'prod' }),\n    await webpackConfig({ config, stage: 'node' }),\n  ]\n  return new Promise(async (resolve, reject) => {\n    webpack(allWebpackConfigs).run((err, stats) => {\n      if (err) {\n        console.log(chalk.red(err.stack || err))\n        if (err.details) {\n          console.log(chalk.red(err.details))\n        }\n        return reject(err)\n      }\n\n      stats.toJson('verbose')\n\n      const [prodStats, nodeStats] = stats.stats\n\n      checkBuildStats('prod', prodStats)\n      checkBuildStats('node', nodeStats)\n\n      function checkBuildStats(stage, stageStats) {\n        const buildErrors = stageStats.hasErrors()\n        const buildWarnings = stageStats.hasWarnings()\n\n        if (buildErrors || buildWarnings) {\n          console.log(\n            stageStats.toString({\n              context: config.context,\n              performance: false,\n              hash: false,\n              timings: true,\n              entrypoints: false,\n              chunkOrigins: false,\n              chunkModules: false,\n              colors: true,\n            })\n          )\n          if (buildErrors) {\n            console.log(\n              chalk.red.bold(`\n                => There were ERRORS during the ${stage} build stage! :(\n                => Fix them and try again!\n              `)\n            )\n          } else if (buildWarnings) {\n            console.log(\n              chalk.yellow(`\n=> There were WARNINGS during the ${stage} build stage. Your site will still function, but you may achieve better performance by addressing the warnings above.\n`)\n            )\n          }\n        }\n      }\n\n      const prodStatsJson = prodStats.toJson()\n\n      fs.outputFileSync(\n        path.join(config.paths.TEMP, 'client-stats.json'),\n        JSON.stringify(prodStatsJson, null, 2)\n      )\n\n      fs.outputFileSync(\n        path.join(config.paths.TEMP, 'bundle-environment.json'),\n        JSON.stringify(process.env, null, 2)\n      )\n\n      resolve(prodStatsJson)\n    })\n  })\n}\n"],"file":"index.js"}