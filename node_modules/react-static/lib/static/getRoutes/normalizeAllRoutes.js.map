{"version":3,"sources":["../../../src/static/getRoutes/normalizeAllRoutes.js"],"names":["normalizeAllRoutes","routes","config","existingRoutes","hasIndex","has404","recurseRoute","route","parent","normalizedRoute","existingRoute","path","children","map","childRoute","isPageExtension","isPage","Object","assign","component","disableDuplicateRoutesWarning","console","warn","normalizedRoutes","filter","Boolean","tree","flatRoutes","push","forEach","undefined"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACe,SAASA,kBAAT,GAAiD;AAAA,MAArBC,MAAqB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;AAC9D,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAIC,QAAJ;AACA,MAAIC,MAAJ;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACtC;AACA;AACA;AACA,QAAIC,eAAe,GAAG,6BAAeF,KAAf,EAAsBC,MAAtB,CAAtB,CAJsC,CAMtC;AACA;;AACA,QAAME,aAAa,GAAGP,cAAc,CAACM,eAAe,CAACE,IAAjB,CAApC;;AAEA,QAAIF,eAAe,CAACG,QAApB,EAA8B;AAC5BH,MAAAA,eAAe,CAACG,QAAhB,GAA2BH,eAAe,CAACG,QAAhB,CAAyBC,GAAzB,CAA6B,UAAAC,UAAU;AAAA,eAChER,YAAY,CAACQ,UAAD,EAAaL,eAAb,CADoD;AAAA,OAAvC,CAA3B;AAGD;;AAED,QAAIM,eAAJ,CAhBsC,CAiBtC;AACA;;AACA,QAAIL,aAAJ,EAAmB;AACjB,UAAIA,aAAa,CAACM,MAAlB,EAA0B;AACxBD,QAAAA,eAAe,GAAG,IAAlB;AACAE,QAAAA,MAAM,CAACC,MAAP,CAAcR,aAAd,oBACKD,eADL;AAEEU,UAAAA,SAAS,EAAET,aAAa,CAACS;AAF3B;AAIAV,QAAAA,eAAe,GAAGC,aAAlB;AACD,OAPD,MAOO,IAAI,CAACR,MAAM,CAACkB,6BAAZ,EAA2C;AAChD;AACAC,QAAAA,OAAO,CAACC,IAAR,CACE,8DADF,EAEEb,eAAe,CAACE,IAFlB;AAID;AACF,KAlCqC,CAoCtC;;;AACAR,IAAAA,cAAc,CAACM,eAAe,CAACE,IAAjB,CAAd,GAAuCF,eAAvC,CArCsC,CAuCtC;;AACA,QAAIA,eAAe,CAACE,IAAhB,KAAyB,GAA7B,EAAkC;AAChCP,MAAAA,QAAQ,GAAG,IAAX;AACD;;AACD,QAAIK,eAAe,CAACE,IAAhB,KAAyB,KAA7B,EAAoC;AAClCN,MAAAA,MAAM,GAAG,IAAT;AACD;;AAED,QAAIU,eAAJ,EAAqB;AACnB,aAAO,KAAP;AACD;;AAED,WAAON,eAAP;AACD,GApDD;;AAsDA,MAAIc,gBAAgB,GAAGtB,MAAM,CAC1BY,GADoB,CAChB,UAAAN,KAAK;AAAA,WAAID,YAAY,CAACC,KAAD,CAAhB;AAAA,GADW,EAEpBiB,MAFoB,CAEbC,OAFa,CAAvB;;AAIA,MAAI,CAACvB,MAAM,CAACwB,IAAZ,EAAkB;AAChB,QAAMC,UAAU,GAAG,EAAnB;;AACA,QAAMrB,aAAY,GAAG,SAAfA,aAAe,CAAAC,KAAK,EAAI;AAC5BoB,MAAAA,UAAU,CAACC,IAAX,CAAgBrB,KAAhB;;AACA,UAAIA,KAAK,CAACK,QAAV,EAAoB;AAClBL,QAAAA,KAAK,CAACK,QAAN,CAAeiB,OAAf,CAAuBvB,aAAvB;AACD;;AACDC,MAAAA,KAAK,CAACK,QAAN,GAAiBkB,SAAjB;AACD,KAND;;AAOAP,IAAAA,gBAAgB,CAACM,OAAjB,CAAyBvB,aAAzB;AACAiB,IAAAA,gBAAgB,GAAGI,UAAnB;AACD;;AAED,SAAO;AACL1B,IAAAA,MAAM,EAAEsB,gBADH;AAELnB,IAAAA,QAAQ,EAARA,QAFK;AAGLC,IAAAA,MAAM,EAANA;AAHK,GAAP;AAKD;;;;;;;;;;;;;0BAjFuBL,kB","sourcesContent":["import normalizeRoute from './normalizeRoute'\n\n// We recursively loop through the routes and their children and\n// return an array of normalised routes.\n// Original routes array [{ path: 'path', children: { path: 'to' } }]\n// These can be returned as flat routes eg. [{ path: 'path' }, { path: 'path/to' }]\n// Or they can be returned nested routes eg. [{ path: 'path', children: { path: 'path/to' } }]\nexport default function normalizeAllRoutes(routes = [], config) {\n  const existingRoutes = {}\n  let hasIndex\n  let has404\n\n  const recurseRoute = (route, parent) => {\n    // if structure is nested (tree === true) normalizedRoute will\n    // have children otherwise we fall back to the original route children\n    // Normalize the route\n    let normalizedRoute = normalizeRoute(route, parent)\n\n    // we check an array of paths to see\n    // if route path already existings\n    const existingRoute = existingRoutes[normalizedRoute.path]\n\n    if (normalizedRoute.children) {\n      normalizedRoute.children = normalizedRoute.children.map(childRoute =>\n        recurseRoute(childRoute, normalizedRoute)\n      )\n    }\n\n    let isPageExtension\n    // If the route exists and is a page route, we need to decorate the\n    // page route with this routes information\n    if (existingRoute) {\n      if (existingRoute.isPage) {\n        isPageExtension = true\n        Object.assign(existingRoute, {\n          ...normalizedRoute,\n          component: existingRoute.component,\n        })\n        normalizedRoute = existingRoute\n      } else if (!config.disableDuplicateRoutesWarning) {\n        // Otherwise, we shouldn't have duplicate routes\n        console.warn(\n          'More than one route in static.config.js is defined for path:',\n          normalizedRoute.path\n        )\n      }\n    }\n\n    // Keep track of the route existence\n    existingRoutes[normalizedRoute.path] = normalizedRoute\n\n    // Keep track of index and 404 routes existence\n    if (normalizedRoute.path === '/') {\n      hasIndex = true\n    }\n    if (normalizedRoute.path === '404') {\n      has404 = true\n    }\n\n    if (isPageExtension) {\n      return false\n    }\n\n    return normalizedRoute\n  }\n\n  let normalizedRoutes = routes\n    .map(route => recurseRoute(route))\n    .filter(Boolean)\n\n  if (!config.tree) {\n    const flatRoutes = []\n    const recurseRoute = route => {\n      flatRoutes.push(route)\n      if (route.children) {\n        route.children.forEach(recurseRoute)\n      }\n      route.children = undefined\n    }\n    normalizedRoutes.forEach(recurseRoute)\n    normalizedRoutes = flatRoutes\n  }\n\n  return {\n    routes: normalizedRoutes,\n    hasIndex,\n    has404,\n  }\n}\n"],"file":"normalizeAllRoutes.js"}