{"version":3,"sources":["../../src/static/generateBrowserPlugins.js"],"names":["config","paths","pluginImports","recurse","plugins","map","plugin","browserLocation","pluginIndex","indexOf","push","length","location","options","JSON","stringify","join","pluginsText","pluginImportsText","imp","index","file","targetPath","path","DIST","fs","remove","outputFile"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;4BAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AAASA,YAAAA,MAAT,QAASA,MAAT;AACLC,YAAAA,KADK,GACKD,MADL,CACLC,KADK,EAGb;;AACMC,YAAAA,aAJO,GAIS,EAJT;;AAMPC,YAAAA,OANO,GAMG,SAAVA,OAAU,CAAAC,OAAO;AAAA,qBACrB;AADqB,2BAEjBA,OAAO,CACRC,GADC,CACG,UAAAC,MAAM,EAAI;AAAA,sBACLC,eADK,GACeD,MADf,CACLC,eADK,EAGb;;AACA,sBAAIC,WAAW,GAAGD,eAAe,GAC7BL,aAAa,CAACO,OAAd,CAAsBF,eAAtB,CAD6B,GAE7B,CAAC,CAFL;;AAGA,sBAAIC,WAAW,KAAK,CAAC,CAAjB,IAAsBD,eAA1B,EAA2C;AACzCL,oBAAAA,aAAa,CAACQ,IAAd,CAAmB,oBAAMH,eAAN,CAAnB;AACAC,oBAAAA,WAAW,GAAGN,aAAa,CAACS,MAAd,GAAuB,CAArC;AACD;;AAVY,sBAYLC,QAZK,GAY0BN,MAZ1B,CAYLM,QAZK;AAAA,sBAYKR,OAZL,GAY0BE,MAZ1B,CAYKF,OAZL;AAAA,sBAYcS,OAZd,GAY0BP,MAZ1B,CAYcO,OAZd,EAcb;;AACA,oDACOD,QADP,6BAEKT,OAAO,CAACC,OAAO,IAAI,EAAZ,CAFZ,yBAIJG,eAAe,mBAAYC,WAAZ,cAA2BM,IAAI,CAACC,SAAL,CAAeF,OAAf,CAA3B,aAJX;AAOD,iBAvBC,EAwBDG,IAxBC,CAwBI,KAxBJ,CAFiB;AAAA;AAAA,aANV,EAkCb;;;AACMC,YAAAA,WAnCO,GAmCOd,OAAO,CAACH,MAAM,CAACI,OAAP,IAAkB,EAAnB,CAnCd,EAqCb;;AACMc,YAAAA,iBAtCO,GAsCahB,aAAa,CACpCG,GADuB,CACnB,UAACc,GAAD,EAAMC,KAAN;AAAA,4CAAgCA,KAAhC,oBAA+CD,GAA/C;AAAA,aADmB,EAEvBH,IAFuB,CAElB,IAFkB,CAtCb,EA0Cb;;AACMK,YAAAA,IA3CO,yBA4CbH,iBA5Ca,6CA+CGD,WA/CH;AAoDPK,YAAAA,UApDO,GAoDMC,cAAKP,IAAL,CAAUf,KAAK,CAACuB,IAAhB,EAAsB,iCAAtB,CApDN;AAAA;AAAA,mBAqDPC,iBAAGC,MAAH,CAAUJ,UAAV,CArDO;;AAAA;AAAA;AAAA,mBAsDPG,iBAAGE,UAAH,CAAcL,UAAd,EAA0BD,IAA1B,CAtDO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import path from 'path'\nimport slash from 'slash'\nimport fs from 'fs-extra'\n\nexport default async ({ config }) => {\n  const { paths } = config\n\n  // A deduped list of pluginImports\n  const pluginImports = []\n\n  const recurse = plugins =>\n    // Return an array of plugins\n    `[${plugins\n      .map(plugin => {\n        const { browserLocation } = plugin\n\n        // Add the plugin to the list of pluginImports\n        let pluginIndex = browserLocation\n          ? pluginImports.indexOf(browserLocation)\n          : -1\n        if (pluginIndex === -1 && browserLocation) {\n          pluginImports.push(slash(browserLocation))\n          pluginIndex = pluginImports.length - 1\n        }\n\n        const { location, plugins, options } = plugin\n\n        // IIF to return the final plugin\n        return `{\n  location: \"${location}\",\n  plugins: ${recurse(plugins || [])},\n  hooks: ${\n    browserLocation ? `plugin${pluginIndex}(${JSON.stringify(options)})` : `{}`\n  }\n}`\n      })\n      .join(',\\n')}]`\n\n  // Create the pluginsText\n  const pluginsText = recurse(config.plugins || [])\n\n  // Create the pluginImportsText\n  const pluginImportsText = pluginImports\n    .map((imp, index) => `import plugin${index} from '${imp}'`)\n    .join('\\n')\n\n  // Create the file text\n  const file = `// Imports\n${pluginImportsText}\n\n// Plugins\nconst plugins = ${pluginsText}\n\n// Export em!\nexport default plugins`\n\n  const targetPath = path.join(paths.DIST, 'react-static-browser-plugins.js')\n  await fs.remove(targetPath)\n  await fs.outputFile(targetPath, file)\n}\n"],"file":"generateBrowserPlugins.js"}