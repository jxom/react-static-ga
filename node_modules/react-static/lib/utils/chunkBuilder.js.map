{"version":3,"sources":["../../src/utils/chunkBuilder.js"],"names":["chunkNameFromFile","filename","chunkName","replace","path","extname","RegExp","sep","substr","absoluteToRelativeChunkName","ROOT","pathPrefix","startsWith","relativeChunkName","indexOf"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,QAAQ,EAAI;AAC3C,MAAMC,SAAS,GAAGD,QAAQ,CACvBE,OADe,CACPC,cAAKC,OAAL,CAAaJ,QAAb,CADO,EACiB,EADjB,EACqB;AADrB,GAEfE,OAFe,CAEP,IAAIG,MAAJ,YAAeF,cAAKG,GAApB,QAA4B,GAA5B,CAFO,EAE2B,GAF3B,CAAlB,CAD2C,CAGO;;AAElD,MAAIL,SAAS,CAAC,CAAD,CAAT,KAAiB,GAArB,EAA0B;AACxB,WAAOA,SAAS,CAACM,MAAV,CAAiB,CAAjB,CAAP;AACD;;AAED,SAAON,SAAP;AACD,CAVM;;;;AAYA,IAAMO,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACC,IAAD,EAAOR,SAAP,EAAqB;AAC9D,MAAMS,UAAU,GAAGD,IAAI,CAACP,OAAL,CAAa,IAAIG,MAAJ,YAAeF,cAAKG,GAApB,QAA4B,GAA5B,CAAb,EAA+C,GAA/C,EAAoDC,MAApD,CACjB,CADiB,CAAnB,CAD8D,CAK9D;;AACA,MAAI,CAACN,SAAS,CAACU,UAAV,CAAqBD,UAArB,CAAL,EAAuC;AACrC,WAAOT,SAAP;AACD,GAR6D,CAU9D;;;AACA,MAAIW,iBAAiB,GAAGX,SAAS,CAACC,OAAV,CACtB,IAAIG,MAAJ,WAAcK,UAAd,GAA4B,GAA5B,CADsB,EAEtB,EAFsB,CAAxB;;AAKA,MAAIE,iBAAiB,CAACD,UAAlB,CAA6B,GAA7B,CAAJ,EAAuC;AACrCC,IAAAA,iBAAiB,GAAGA,iBAAiB,CAACL,MAAlB,CAAyB,CAAzB,CAApB;AACD,GAlB6D,CAoB9D;;;AACA,MAAIK,iBAAiB,CAACC,OAAlB,CAA0B,GAA1B,CAAJ,EAAoC;AAClCD,IAAAA,iBAAiB,GAAGA,iBAAiB,CAACL,MAAlB,CAClB,CADkB,EAElBK,iBAAiB,CAACC,OAAlB,CAA0B,GAA1B,CAFkB,CAApB;AAID;;AAED,SAAOD,iBAAP;AACD,CA7BM;;;;;;;;;;;;;;0BAZMb,iB;0BAYAS,2B","sourcesContent":["import path from 'path'\n\nexport const chunkNameFromFile = filename => {\n  const chunkName = filename\n    .replace(path.extname(filename), '') // extension\n    .replace(new RegExp(`[${path.sep}]`, 'g'), '-') // slash to -\n\n  if (chunkName[0] === '-') {\n    return chunkName.substr(1)\n  }\n\n  return chunkName\n}\n\nexport const absoluteToRelativeChunkName = (ROOT, chunkName) => {\n  const pathPrefix = ROOT.replace(new RegExp(`[${path.sep}]`, 'g'), '-').substr(\n    1\n  )\n\n  // inner components can simply be added aswell\n  if (!chunkName.startsWith(pathPrefix)) {\n    return chunkName\n  }\n\n  // the templates starts with the absolute path, thats the ones we want to replace\n  let relativeChunkName = chunkName.replace(\n    new RegExp(`${pathPrefix}`, 'g'),\n    ''\n  )\n\n  if (relativeChunkName.startsWith('-')) {\n    relativeChunkName = relativeChunkName.substr(1)\n  }\n\n  // cut of the extension if any\n  if (relativeChunkName.indexOf('.')) {\n    relativeChunkName = relativeChunkName.substr(\n      0,\n      relativeChunkName.indexOf('.')\n    )\n  }\n\n  return relativeChunkName\n}\n"],"file":"chunkBuilder.js"}