{"version":3,"sources":["../../src/utils/progress.js"],"names":["total","label","options","format","stream","process","stderr","isTTY","forceNonTTY","Progress","curr","percent","start","Date","tick","ratio","Math","min","max","value","floor","elapsed","eta","rate","write","replace","Number","isNaN","toFixed","isFinite","round"],"mappings":";;;;;;;AAAA;;;;;;;;;;eAEe,kBAACA,KAAD,EAAQC,KAAR,EAAeC,OAAf,EAA2B;AACxC,MAAI,CAACA,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG,EAAV;AACD;;AACD,MAAI,CAACA,OAAO,CAACC,MAAb,EAAqB;AACnBD,IAAAA,OAAO,CAACC,MAAR,gBACEF,KAAK,aAAMA,KAAN,SAAiB,EADxB;AAGD;;AACD,MAAMG,MAAM,GAAGF,OAAO,CAACE,MAAR,IAAkBC,OAAO,CAACC,MAAzC;;AACA,MAAIF,MAAM,CAACG,KAAP,IAAgB,CAACL,OAAO,CAACM,WAA7B,EAA0C;AACxCN,IAAAA,OAAO,CAACF,KAAR,GAAgBA,KAAhB;AACA,WAAO,IAAIS,iBAAJ,CAAaP,OAAO,CAACC,MAArB,EAA6BD,OAA7B,CAAP;AACD;;AACD,MAAIQ,IAAI,GAAG,CAAX;AACA,MAAIC,OAAO,GAAG,CAAd;AACA,MAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,SAAO;AACLC,IAAAA,IAAI,EAAE,gBAAM;AACVJ,MAAAA,IAAI,IAAI,CAAR;AACA,UAAMK,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASR,IAAI,GAAGV,KAAhB,EAAuB,CAAvB,CAAT,EAAoC,CAApC,CAAd;AACA,UAAMmB,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAWL,KAAK,GAAG,GAAnB,CAAd;;AAEA,UAAII,KAAK,IAAIR,OAAO,GAAG,CAAvB,EAA0B;AACxBA,QAAAA,OAAO,GAAGQ,KAAV;AACA,YAAME,OAAO,GAAG,IAAIR,IAAJ,KAAaD,KAA7B;AACA,YAAMU,GAAG,GAAGX,OAAO,KAAK,GAAZ,GAAkB,CAAlB,GAAsBU,OAAO,IAAIrB,KAAK,GAAGU,IAAR,GAAe,CAAnB,CAAzC;AACA,YAAMa,IAAI,GAAGb,IAAI,IAAIW,OAAO,GAAG,IAAd,CAAjB;AACAjB,QAAAA,MAAM,CAACoB,KAAP,WACKtB,OAAO,CAACC,MAAR,CACAsB,OADA,CACQ,SADR,EACmB,EADnB,EAEAA,OAFA,CAEQ,QAFR,EAEkB,EAFlB,EAGAA,OAHA,CAGQ,UAHR,EAGoBf,IAHpB,EAIAe,OAJA,CAIQ,QAJR,EAIkBzB,KAJlB,EAKAyB,OALA,CAMC,UAND,EAOCC,MAAM,CAACC,KAAP,CAAaN,OAAb,IAAwB,KAAxB,GAAgC,CAACA,OAAO,GAAG,IAAX,EAAiBO,OAAjB,CAAyB,CAAzB,CAPjC,EASAH,OATA,CAUC,MAVD,EAWCC,MAAM,CAACC,KAAP,CAAaL,GAAb,KAAqB,CAACI,MAAM,CAACG,QAAP,CAAgBP,GAAhB,CAAtB,GACI,KADJ,GAEI,CAACA,GAAG,GAAG,IAAP,EAAaM,OAAb,CAAqB,CAArB,CAbL,EAeAH,OAfA,CAeQ,UAfR,YAeuBd,OAAO,CAACiB,OAAR,CAAgB,CAAhB,CAfvB,QAgBAH,OAhBA,CAgBQ,OAhBR,EAgBiBT,IAAI,CAACc,KAAL,CAAWP,IAAX,CAhBjB,CADL;AAmBD;AACF;AA/BI,GAAP;AAiCD,C","sourcesContent":["import Progress from 'progress'\n\nexport default (total, label, options) => {\n  if (!options) {\n    options = {}\n  }\n  if (!options.format) {\n    options.format = `=> ${\n      label ? `${label} ` : ''\n    }[:bar] :current/:total :percent :rate/s :etas `\n  }\n  const stream = options.stream || process.stderr\n  if (stream.isTTY && !options.forceNonTTY) {\n    options.total = total\n    return new Progress(options.format, options)\n  }\n  let curr = 0\n  let percent = 0\n  const start = new Date()\n  return {\n    tick: () => {\n      curr += 1\n      const ratio = Math.min(Math.max(curr / total, 0), 1)\n      const value = Math.floor(ratio * 100)\n\n      if (value >= percent + 5) {\n        percent = value\n        const elapsed = new Date() - start\n        const eta = percent === 100 ? 0 : elapsed * (total / curr - 1)\n        const rate = curr / (elapsed / 1000)\n        stream.write(\n          `${options.format\n            .replace('[:bar] ', '')\n            .replace('[:bar]', '')\n            .replace(':current', curr)\n            .replace(':total', total)\n            .replace(\n              ':elapsed',\n              Number.isNaN(elapsed) ? '0.0' : (elapsed / 1000).toFixed(1)\n            )\n            .replace(\n              ':eta',\n              Number.isNaN(eta) || !Number.isFinite(eta)\n                ? '0.0'\n                : (eta / 1000).toFixed(1)\n            )\n            .replace(':percent', `${percent.toFixed(0)}%`)\n            .replace(':rate', Math.round(rate))}\\n`\n        )\n      }\n    },\n  }\n}\n"],"file":"progress.js"}