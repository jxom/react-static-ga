{"version":3,"sources":["../../src/utils/binHelper.js"],"names":["path","require","escapeRegExp","ignorePath","Error","stackTraceLimit","Infinity","ignore","babelIgnore","filename","RegExp","sep","test","updateNotifier","PrettyError","pkg","notify","isGlobal","ignoredExtensions","forEach","ext","extensions","console","error","err","rest","log","render","process","on","r","module","exports","setIgnorePath","undefined"],"mappings":";;;;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;eACyBA,OAAO,CAAC,IAAD,C;IAAxBC,Y,YAAAA,Y;;AAER,IAAIC,UAAJ,C,CAEA;;AACAC,KAAK,CAACC,eAAN,GAAwBC,QAAxB;;AAEAL,OAAO,CAAC,iBAAD,CAAP,CAA2B;AACzBM,EAAAA,MAAM,EAAE,CACN,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC7B;AACA,WACE,IAAIC,MAAJ,CAAWR,YAAY,WAAIF,IAAI,CAACW,GAAT,yBAA2BX,IAAI,CAACW,GAAhC,EAAvB,EAA+DC,IAA/D,CACEH,QADF,KAGCN,UAAU,IAAIA,UAAU,CAACS,IAAX,CAAgBH,QAAhB,CAJjB;AAMD,GATK;AADiB,CAA3B;;AAcA,IAAMI,cAAc,GAAGZ,OAAO,CAAC,iBAAD,CAA9B;;AACA,IAAMa,WAAW,GAAGb,OAAO,CAAC,cAAD,CAA3B;;AACA,IAAMc,GAAG,GAAGd,OAAO,CAAC,oBAAD,CAAnB;;AAEAY,cAAc,CAAC;AAAEE,EAAAA,GAAG,EAAHA;AAAF,CAAD,CAAd,CAAwBC,MAAxB,CAA+B;AAC7BC,EAAAA,QAAQ,EAAE;AADmB,CAA/B,E,CAIA;AACA;;AACA,IAAMC,iBAAiB,GAAG,CACxB,KADwB,EAExB,MAFwB,EAGxB,MAHwB,EAIxB,MAJwB,EAKxB,KALwB,EAMxB,KANwB,EAOxB,KAPwB,EAQxB,MARwB,EASxB,KATwB,EAUxB,MAVwB,EAWxB,OAXwB,EAYxB,KAZwB,EAaxB,KAbwB,EAcxB,KAdwB,EAexB,KAfwB,EAgBxB,MAhBwB,EAiBxB,KAjBwB,EAkBxB,KAlBwB,EAmBxB,KAnBwB,EAoBxB,IApBwB,EAqBxB,MArBwB,CAA1B;AAuBAA,iBAAiB,CAACC,OAAlB,CAA0B,UAAAC,GAAG,EAAI;AAC/BnB,EAAAA,OAAO,CAACoB,UAAR,YAAuBD,GAAvB,KAAgC,YAAM,CAAE,CAAxC;AACD,CAFD;;AAIAE,OAAO,CAACC,KAAR,GAAgB,UAACC,GAAD;AAAA;;AAAA,oCAASC,IAAT;AAASA,IAAAA,IAAT;AAAA;;AAAA,SACd,YAAAH,OAAO,EAACI,GAAR,kBAAY,IAAIZ,WAAJ,GAAkBa,MAAlB,CAAyBH,GAAzB,CAAZ,SAA8CC,IAA9C,EADc;AAAA,CAAhB,C,CAGA;AACA;;;AACAG,OAAO,CAACC,EAAR,CAAW,oBAAX,EAAiC,UAAAC,CAAC,EAAI;AACpCR,EAAAA,OAAO,CAACC,KAAR,CAAcO,CAAd;AACD,CAFD;AAIAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,aADe,yBACDjC,IADC,EACK;AAClBG,IAAAA,UAAU,GAAGH,IAAI,GAAG,IAAIU,MAAJ,CAAWR,YAAY,CAACF,IAAD,CAAvB,CAAH,GAAoCkC,SAArD;AACD;AAHc,CAAjB;;;;;;;;;;;;0BAjEI/B,U;0BA6BEe,iB","sourcesContent":["const path = require('path')\nconst { escapeRegExp } = require('./')\n\nlet ignorePath\n\n// Allow as much stack tracing as possible\nError.stackTraceLimit = Infinity\n\nrequire('@babel/register')({\n  ignore: [\n    function babelIgnore(filename) {\n      // true if should ignore\n      return (\n        new RegExp(escapeRegExp(`${path.sep}node_modules${path.sep}`)).test(\n          filename\n        ) ||\n        (ignorePath && ignorePath.test(filename))\n      )\n    },\n  ],\n})\n\nconst updateNotifier = require('update-notifier')\nconst PrettyError = require('pretty-error')\nconst pkg = require('../../package.json')\n\nupdateNotifier({ pkg }).notify({\n  isGlobal: false,\n})\n\n// necesarry at any entry point of the cli to ensure that Babel-register\n// does not attempt to transform non JavaScript files.\nconst ignoredExtensions = [\n  'css',\n  'scss',\n  'styl',\n  'less',\n  'png',\n  'gif',\n  'jpg',\n  'jpeg',\n  'svg',\n  'woff',\n  'woff2',\n  'ttf',\n  'eot',\n  'otf',\n  'mp4',\n  'webm',\n  'ogg',\n  'mp3',\n  'wav',\n  'md',\n  'yaml',\n]\nignoredExtensions.forEach(ext => {\n  require.extensions[`.${ext}`] = () => {}\n})\n\nconsole.error = (err, ...rest) =>\n  console.log(new PrettyError().render(err), ...rest)\n\n// Be sure to log useful information about unhandled exceptions. This should seriously\n// be a default: https://github.com/nodejs/node/issues/9523#issuecomment-259303079\nprocess.on('unhandledRejection', r => {\n  console.error(r)\n})\n\nmodule.exports = {\n  setIgnorePath(path) {\n    ignorePath = path ? new RegExp(escapeRegExp(path)) : undefined\n  },\n}\n"],"file":"binHelper.js"}